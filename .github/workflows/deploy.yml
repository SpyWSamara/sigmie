name: Deploy

# on: [push]

on:
  release:
    types: # This configuration does not affect the page_build event above
      - created
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ubuntu-18.04
    env:
      GOOGLE_PASSPHRASE: ${{ secrets.google_passphrase }}
      COMPOSER_PASSPHRASE: ${{ secrets.composer_passphrase }}
      ASSET_URL: https://mos-sigma.storage.googleapis.com/public
      APP_DEBUG: false
      APP_ENV: production
      APP_KEY: base64:6CPMmM8RByBPlknSQqcwHQ86a1SO+ZEa9/zeGKqj974=
      APP_NAME: MOS - Sigma
      APP_URL: http://mos-sigma.com
      BROADCAST_DRIVER: redis
      CACHE_DRIVER: redis
      CONFIGCAT_KEY: fJPXCGrKtz19Kiy3pl3SAg/N37ZkYKmzkiG_2oMG0C8XA
      LOG_CHANNEL: stack
      MAIL_DRIVER: mailgun
      MAIL_HOST: mg.mos-sigma.com
      MAILGUN_ENDPOINT: api.eu.mailgun.net
      MAILGUN_SECRET: key-fdfd771a0f2fbd29d5e279bed9dd0839
      QUEUE_CONNECTION: redis
      REDIS_HOST: redis.internal.mos-sigma.com
      REDIS_PASSWORD: jB#6#3dyThj@
      REDIS_PORT: 6379
      SESSION_DRIVER: redis
      SESSION_LIFETIME: 120
      STRIPE_KEY: pk_test_c9qTG6rra0eQdTd6n7Nhcqka00a3YibJYB
      STRIPE_SECRET: sk_test_EKWRDUE6EhJEmxXttvX1cYLm00j8yti82y
      DB_CONNECTION: mysql
      DB_HOST: db.internal.mos-sigma.com
      DB_PORT: 3306
      DB_DATABASE: mossigma
      DB_USERNAME: application
      DB_PASSWORD: 3kPjZ4UsZnA&
      TELESCOPE_ENABLED: false

    steps:
    - uses: actions/checkout@v2

    - name: Set tag env
      run: echo ::set-env name=RELEASE_VERSION::${GITHUB_REF:10}

    - name: Decrypt google secret
      run: gpg --quiet --batch --yes --decrypt --passphrase=$GOOGLE_PASSPHRASE --output google.json .github/secrets/google.json.gpg

    - name: Decrypt composer secret
      run: gpg --quiet --batch --yes --decrypt --passphrase=$COMPOSER_PASSPHRASE --output auth.json .github/secrets/composer.json.gpg

    - name: Install curl and npm
      run: sudo apt-get update && sudo apt-get install -y curl npm

    - name: Install composer
      run: curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer

    - name: Validate composer.json and composer.lock
      run: composer validate

    - name: Install php production dependencies
      run: composer install -q --no-dev --optimize-autoloader --no-ansi --no-interaction --no-scripts --no-suggest --no-progress --prefer-dist

    - name: Install node dependencies
      run:  curl https://nodejs.org/dist/v8.10.0/node-v8.10.0-linux-x64.tar.gz | sudo tar xzvf - --exclude CHANGELOG.md --exclude LICENSE --exclude README.md --strip-components 1 -C /usr/local/

    - name: Install node
      run: npm install

    - name: Create .env file
      run: touch .env

    - name: Clear and cache routes
      run: php artisan route:clear && php artisan route:cache

    - name: Clear and cache config
      run: php artisan config:clear && php artisan config:cache

    - name: Compile production assets
      run: npm run production

    - name: Install GCloud
      run: if [ ! -d "$HOME/google-cloud-sdk/bin" ]; then rm -rf $HOME/google-cloud-sdk; export CLOUDSDK_CORE_DISABLE_PROMPTS=1; curl https://sdk.cloud.google.com | bash; fi

    - name: Gcloud authentication
      run: gcloud auth activate-service-account --key-file=google.json

    - name: Docker authentication
      run: gcloud auth configure-docker

    - name: Build nginx image
      run: docker build -t eu.gcr.io/mossigma-app-production/nginx -f .devcontainer/nginx/Dockerfile .

    - name: Push nginx image to gcr
      run: docker push eu.gcr.io/mossigma-app-production/nginx

    - name: Build php image
      run: docker build -t eu.gcr.io/mossigma-app-production/fpm -f .devcontainer/fpm/Dockerfile .

    - name: Push php image to gcr
      run: docker push eu.gcr.io/mossigma-app-production/fpm

    - name: Build sheduler image
      run: docker build -t eu.gcr.io/mossigma-app-production/scheduler -f .devcontainer/scheduler/Dockerfile .

    - name: Push sheduler image to gcr
      run: docker push eu.gcr.io/mossigma-app-production/scheduler

    - name: Build worker image
      run: docker build -t eu.gcr.io/mossigma-app-production/worker -f .devcontainer/worker/Dockerfile .

    - name: Push worker image to gcr
      run: docker push eu.gcr.io/mossigma-app-production/worker

    - name: Deploy assets to mos-sigma bucket
      run: gsutil -m rsync -r ./public gs://mos-sigma/${{ env.RELEASE_VERSION }}

    - name: Echo assets url to .env
      run: echo "ASSET_URL=https://mos-sigma.storage.googleapis.com/${{ env.RELEASE_VERSION }}"
